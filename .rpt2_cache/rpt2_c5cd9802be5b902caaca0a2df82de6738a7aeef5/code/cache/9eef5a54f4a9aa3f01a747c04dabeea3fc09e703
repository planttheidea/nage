{"code":"import { getEmptyObject, notifyError } from './utils';\r\n/**\r\n * @constant EMPTY_OBJECT an empty object, to avoid unnecessary garbage when creating new pools\r\n */\r\nvar EMPTY_OBJECT = {};\r\n/**\r\n * @var timeBasis the relative time basis to include in the id (incremented as counter)\r\n */\r\nvar timeBasis = Date.now() % 1e9;\r\n/**\r\n * @class Nage\r\n *\r\n * @classdesc pool objects, generating new ones only when necessary\r\n */\r\nvar NagePool = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     *\r\n     * @param [options] the options passed\r\n     * @param [options.create=getEmptyObject] the method to create new pool entries\r\n     * @param [options.onRelease] the function to call when releasing an entry back to the pool\r\n     * @param [options.onReserve] the function to call when reserving an entry from the pool\r\n     * @returns the pool\r\n     */\r\n    function NagePool(_a) {\r\n        var _b = _a === void 0 ? EMPTY_OBJECT : _a, _c = _b.create, create = _c === void 0 ? getEmptyObject : _c, _d = _b.initialSize, initialSize = _d === void 0 ? 1 : _d, _e = _b.maxSize, maxSize = _e === void 0 ? Infinity : _e, name = _b.name, onRelease = _b.onRelease, onReserve = _b.onReserve, onReset = _b.onReset;\r\n        this._entries = new WeakMap();\r\n        // eslint-disable-next-line no-bitwise\r\n        this._id = \"nage_\" + timeBasis++ + \"_\" + ((Math.random() * 1e9) >>> 0);\r\n        this._stack = [];\r\n        this._generated = 0;\r\n        if (typeof create !== 'function') {\r\n            throw new Error('create must be a function');\r\n        }\r\n        this.create = create;\r\n        if (onRelease) {\r\n            if (typeof onRelease === 'function') {\r\n                this.onRelease = onRelease;\r\n            }\r\n            else {\r\n                notifyError('onRelease must be a function');\r\n            }\r\n        }\r\n        if (onReserve) {\r\n            if (typeof onReserve === 'function') {\r\n                this.onReserve = onReserve;\r\n            }\r\n            else {\r\n                notifyError('onReserve must be a function');\r\n            }\r\n        }\r\n        if (onReset) {\r\n            if (typeof onReset === 'function') {\r\n                this.onReset = onReset;\r\n            }\r\n            else {\r\n                notifyError('onReset must be a function');\r\n            }\r\n        }\r\n        var computedInitialSize = Math.min(initialSize, maxSize);\r\n        this.initialSize = computedInitialSize;\r\n        this.maxSize = maxSize;\r\n        if (computedInitialSize) {\r\n            var stack = this._stack;\r\n            for (var index = 0; index < computedInitialSize; ++index) {\r\n                stack.push(this._generate());\r\n            }\r\n        }\r\n        this.name = name;\r\n    }\r\n    Object.defineProperty(NagePool.prototype, \"available\", {\r\n        /**\r\n         * @instance\r\n         * @var available the number of items in the pool available for reservation\r\n         */\r\n        get: function () {\r\n            return this._stack.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NagePool.prototype, \"reserved\", {\r\n        /**\r\n         * @instance\r\n         * @var reserved the number of items in the pool currently reserved\r\n         */\r\n        get: function () {\r\n            return this._generated - this._stack.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NagePool.prototype, \"size\", {\r\n        /**\r\n         * @instance\r\n         * @var size the total number of items in the pool, both reserved and available\r\n         */\r\n        get: function () {\r\n            return this._generated;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @instance\r\n     * @function _generate\r\n     *\r\n     * @description\r\n     * create a new pool entry and add it to the list of _entries\r\n     *\r\n     * @returns a new entry\r\n     */\r\n    NagePool.prototype._generate = function () {\r\n        var entry = this.create();\r\n        this._entries.set(entry, this._id);\r\n        ++this._generated;\r\n        return entry;\r\n    };\r\n    /**\r\n     * @instance\r\n     * @function release\r\n     *\r\n     * @description\r\n     * return the entry passed to the pool if not already present\r\n     *\r\n     * @throws if the entry is not part of the original pool\r\n     *\r\n     * @param entry the entry to release back to the pool\r\n     */\r\n    NagePool.prototype.release = function (entry) {\r\n        if (this._entries.get(entry) !== this._id) {\r\n            return notifyError('Object passed is not part of this pool.');\r\n        }\r\n        var _a = this, onRelease = _a.onRelease, stack = _a._stack;\r\n        if (stack.length < this.maxSize && stack.indexOf(entry) === -1) {\r\n            if (onRelease) {\r\n                onRelease(entry);\r\n            }\r\n            stack.push(entry);\r\n        }\r\n    };\r\n    /**\r\n     * @instance\r\n     * @function releaseN\r\n     *\r\n     * @description\r\n     * return the entries passed to the pool if not already present\r\n     *\r\n     * @param entries the entries to release back to the pool\r\n     */\r\n    NagePool.prototype.releaseN = function (entries) {\r\n        var _this = this;\r\n        entries.forEach(function (entry) { return _this.release(entry); });\r\n    };\r\n    /**\r\n     * @instance\r\n     * @function reserve\r\n     *\r\n     * @description\r\n     * get either an existing entry, or a newly-_generated one\r\n     *\r\n     * @param numberOfEntries the number of _entries to reserve\r\n     * @returns a pool entry\r\n     */\r\n    NagePool.prototype.reserve = function () {\r\n        var _a = this, onReserve = _a.onReserve, stack = _a._stack;\r\n        var reserved = stack.length ? stack.pop() : this._generate();\r\n        if (onReserve) {\r\n            onReserve(reserved);\r\n        }\r\n        return reserved;\r\n    };\r\n    /**\r\n     * @instance\r\n     * @function reserveN\r\n     *\r\n     * @description\r\n     * get reserve multiple entries from the pool\r\n     *\r\n     * @param size the number of entries to reserve\r\n     * @returns an array of pool entries\r\n     */\r\n    NagePool.prototype.reserveN = function (size) {\r\n        var reservations = new Array(size);\r\n        for (var index = 0; index < size; ++index) {\r\n            reservations[index] = this.reserve();\r\n        }\r\n        return reservations;\r\n    };\r\n    /**\r\n     * @instance\r\n     * @function reset\r\n     *\r\n     * @description\r\n     * reset the _stack of pool items to initial state\r\n     */\r\n    NagePool.prototype.reset = function () {\r\n        var _a = this, initialSize = _a.initialSize, onReset = _a.onReset, stack = _a._stack;\r\n        if (onReset) {\r\n            onReset(stack);\r\n        }\r\n        var length = stack.length;\r\n        if (length) {\r\n            var entries = this._entries;\r\n            for (var index = 0; index < length; ++index) {\r\n                entries.delete(stack[index]);\r\n            }\r\n            stack.length = 0;\r\n        }\r\n        this._generated = 0;\r\n        for (var index = 0; index < initialSize; ++index) {\r\n            stack.push(this._generate());\r\n        }\r\n    };\r\n    return NagePool;\r\n}());\r\nexport default NagePool;\r\n//# sourceMappingURL=NagePool.js.map","references":["/home/tquetano/git/nage/src/utils.ts"],"map":"{\"version\":3,\"file\":\"NagePool.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/NagePool.ts\"],\"names\":[],\"mappings\":\"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\"}"}
